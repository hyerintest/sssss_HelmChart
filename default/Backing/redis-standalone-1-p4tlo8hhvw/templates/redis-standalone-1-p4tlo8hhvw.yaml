apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: {{ .Values.redis.statefulset.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
    app.kubernetes.io/managed-by: Helm
imagePullSecrets:
  - name: turaco-harbor-registry
---
# Source: redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.redis.secret.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  host: {{ .Values.redis.statefulset.name | toString | b64enc | quote }}
  port: {{ .Values.redis.secret.port | toString | b64enc | quote }}
  password: {{ .Values.redis.secret.password | toString | quote }}
---
# Source: redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.redis.statefulset.name }}-health
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.redis.statefulset.name }}-scripts
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.redis.statefulset.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: {{ .Values.redis.statefulset.port }}
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
    app.kubernetes.io/component: master
---
# Source: redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.redis.statefulset.name }}
  namespace: {{ .Values.namespace }}
  labels:
    turaco-app: {{ .Values.redis.statefulset.name }}
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
      app.kubernetes.io/component: master
  serviceName: {{ .Values.redis.statefulset.name }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        turaco-app: {{ .Values.redis.statefulset.name }}
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.10.1
        app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: f27cd06af4ba142465e3e381985fe5bafaa8c7943a2e0a64e536989605477e30
        checksum/health: 0511df16ce22cd231457ebd2aecbce69f334f0220996c942d8fd844aca043050
        checksum/scripts: 308ea3cf51005628e6baba0d1aba21133dadee933f37b7411b32225b8f509125
        checksum/secret: 1b41181a1b30388af7c12337b3ad4f3ac7961f716b9c5dc174e55f40afcf9e24
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: {{ .Values.redis.statefulset.name }}
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: registry.turacocloud.com/turaco-common/redis:7.0.11-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.secret.name }}
                  key: password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "{{ .Values.redis.statefulset.port }}"
          ports:
            - name: redis
              containerPort: {{ .Values.redis.statefulset.port }}
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: {{ .Values.redis.statefulset.name }}-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: {{ .Values.redis.statefulset.name }}-health
            defaultMode: 0755
        - name: config
          configMap:
            name: {{ .Values.redis.statefulset.name }}-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        annotations:
          volume.beta.kubernetes.io/storage-class: {{ .Values.pvc.storageClass }}
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: {{ .Values.redis.statefulset.name }}
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "{{ .Values.pvc.accessMode }}"
        resources:
          requests:
            storage: {{ .Values.pvc.size }}
